%%% Max Number of Euler Regions
#maxint=63.

%%% Euler Regions
r(M):- #int(M),M>=1,M<=#maxint.

%%% Concepts
tax(t2018,0).
concept2(A, B) :- concept(A,B,_).
concept2(c2018_PRChina,0).
concept2(c2018_ROChina,0).
concept(c2018_AsiaOther,0,0).
concept2(c2018_Asia,0).
concept(c2018_ChinaOther,0,1).
concept(c2018_MainlandChina,0,2).
concept(c2018_JapanOther,0,3).
concept(c2018_JapanIslands,0,4).
concept(c2018_TaiwanOther,0,5).
concept2(c2018_Japan,0).
concept(c2018_Taiwan,0,6).
tax(t1660,1).
concept2(A, B) :- concept(A,B,_).
concept(c1660_MainlandChina,1,0).
concept(c1660_JapanOther,1,1).
concept(c1660_TaiwanOther,1,2).
concept(c1660_AsiaOther,1,3).
concept2(c1660_QingDynasty,1).
concept(c1660_ChinaOther,1,4).
concept2(c1660_EdoPeriod,1).
concept2(c1660_KingdomOfTungning,1).
concept2(c1660_Asia,1).
concept(c1660_JapanIslands,1,5).
concept(c1660_Formosa,1,6).

%%% Euler Bit
bit(M, 0, V):-r(M),M1=M/1, #mod(M1,8,V).
bit(M, 1, V):-r(M),M1=M/8, #mod(M1,8,V).


%%% Meaning of regions
in(X, M) :- r(M),concept(X,T,N),N1=N+1,bit(M,T,N1).
out(X, M) :- r(M),concept(X,T,N),N1=N+1,not bit(M,T,N1).
in(X, M) :- r(M),concept2(X,_),not out(X, M).
out(X, M) :- out3(X, M, _), ix.
irs(M) :- in(X, M), out(X, M), r(M), concept2(X,_).

%%% Constraints of regions.
irs(X) :- ir(X, _).
vrs(X) :- vr(X, _).
vr(X, X) :- not irs(X), r(X).
ir(X, X) :- not vrs(X), r(X), pw.
ie(prod(A,B)) :- vr(X, A), ir(X, B), ix.
:- vrs(X), irs(X), pw.

%%% Inconsistency Explanation.
ie(s(R, A, Y)) :- pie(R, A, Y), not cc(R, Y), ix.
cc(R, Y) :- c(R, _, Y), ix.

%%% Parent-Child relations
%% ISA
% c2018_ROChina isa c2018_Asia
ir(X, r0) :- in(c2018_ROChina, X), out(c2018_Asia, X), pw.
ir(X, prod(r0,R)) :- in(c2018_ROChina,X), out3(c2018_Asia, X, R), ix.
:- #count {X : vrs(X), in(c2018_ROChina,X), in(c2018_Asia,X)} <= 0, pw.
pie(r0, A, 1) :- ir(X, A), in(c2018_ROChina, X), in(c2018_Asia, X), ix.
c(r0, A, 1) :- vr(X, A), in(c2018_ROChina, X), in(c2018_Asia, X), ix.

% c2018_PRChina isa c2018_Asia
ir(X, r1) :- in(c2018_PRChina, X), out(c2018_Asia, X), pw.
ir(X, prod(r1,R)) :- in(c2018_PRChina,X), out3(c2018_Asia, X, R), ix.
:- #count {X : vrs(X), in(c2018_PRChina,X), in(c2018_Asia,X)} <= 0, pw.
pie(r1, A, 1) :- ir(X, A), in(c2018_PRChina, X), in(c2018_Asia, X), ix.
c(r1, A, 1) :- vr(X, A), in(c2018_PRChina, X), in(c2018_Asia, X), ix.

% c2018_Japan isa c2018_Asia
ir(X, r2) :- in(c2018_Japan, X), out(c2018_Asia, X), pw.
ir(X, prod(r2,R)) :- in(c2018_Japan,X), out3(c2018_Asia, X, R), ix.
:- #count {X : vrs(X), in(c2018_Japan,X), in(c2018_Asia,X)} <= 0, pw.
pie(r2, A, 1) :- ir(X, A), in(c2018_Japan, X), in(c2018_Asia, X), ix.
c(r2, A, 1) :- vr(X, A), in(c2018_Japan, X), in(c2018_Asia, X), ix.

% c2018_AsiaOther isa c2018_Asia
ir(X, r3) :- in(c2018_AsiaOther, X), out(c2018_Asia, X), pw.
ir(X, prod(r3,R)) :- in(c2018_AsiaOther,X), out3(c2018_Asia, X, R), ix.
:- #count {X : vrs(X), in(c2018_AsiaOther,X), in(c2018_Asia,X)} <= 0, pw.
pie(r3, A, 1) :- ir(X, A), in(c2018_AsiaOther, X), in(c2018_Asia, X), ix.
c(r3, A, 1) :- vr(X, A), in(c2018_AsiaOther, X), in(c2018_Asia, X), ix.

%% coverage
out3(c2018_Asia, X, r4) :- out(c2018_ROChina, X), out(c2018_PRChina, X), out(c2018_Japan, X), out(c2018_AsiaOther, X), ix.
out(c2018_Asia, X) :- out(c2018_ROChina, X), out(c2018_PRChina, X), out(c2018_Japan, X), out(c2018_AsiaOther, X), pw.
%% sibling disjointness
% c2018_ROChina ! c2018_PRChina
ir(X, r5) :- in(c2018_ROChina, X), in(c2018_PRChina, X).
:- #count {X : vrs(X), in(c2018_ROChina,X), out(c2018_PRChina,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_ROChina,X), in(c2018_PRChina,X)} <= 0, pw.
pie(r5, A, 1) :- ir(X, A), in(c2018_ROChina, X), out(c2018_PRChina, X), ix.
c(r5, A, 1) :- vr(X, A), in(c2018_ROChina, X), out(c2018_PRChina, X), ix.
pie(r5, A, 2) :- ir(X, A), out(c2018_ROChina, X), in(c2018_PRChina, X), ix.
c(r5, A, 2) :- vr(X, A), out(c2018_ROChina, X), in(c2018_PRChina, X), ix.

% c2018_ROChina ! c2018_Japan
ir(X, r6) :- in(c2018_ROChina, X), in(c2018_Japan, X).
:- #count {X : vrs(X), in(c2018_ROChina,X), out(c2018_Japan,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_ROChina,X), in(c2018_Japan,X)} <= 0, pw.
pie(r6, A, 1) :- ir(X, A), in(c2018_ROChina, X), out(c2018_Japan, X), ix.
c(r6, A, 1) :- vr(X, A), in(c2018_ROChina, X), out(c2018_Japan, X), ix.
pie(r6, A, 2) :- ir(X, A), out(c2018_ROChina, X), in(c2018_Japan, X), ix.
c(r6, A, 2) :- vr(X, A), out(c2018_ROChina, X), in(c2018_Japan, X), ix.

% c2018_ROChina ! c2018_AsiaOther
ir(X, r7) :- in(c2018_ROChina, X), in(c2018_AsiaOther, X).
:- #count {X : vrs(X), in(c2018_ROChina,X), out(c2018_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_ROChina,X), in(c2018_AsiaOther,X)} <= 0, pw.
pie(r7, A, 1) :- ir(X, A), in(c2018_ROChina, X), out(c2018_AsiaOther, X), ix.
c(r7, A, 1) :- vr(X, A), in(c2018_ROChina, X), out(c2018_AsiaOther, X), ix.
pie(r7, A, 2) :- ir(X, A), out(c2018_ROChina, X), in(c2018_AsiaOther, X), ix.
c(r7, A, 2) :- vr(X, A), out(c2018_ROChina, X), in(c2018_AsiaOther, X), ix.

% c2018_PRChina ! c2018_Japan
ir(X, r8) :- in(c2018_PRChina, X), in(c2018_Japan, X).
:- #count {X : vrs(X), in(c2018_PRChina,X), out(c2018_Japan,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_PRChina,X), in(c2018_Japan,X)} <= 0, pw.
pie(r8, A, 1) :- ir(X, A), in(c2018_PRChina, X), out(c2018_Japan, X), ix.
c(r8, A, 1) :- vr(X, A), in(c2018_PRChina, X), out(c2018_Japan, X), ix.
pie(r8, A, 2) :- ir(X, A), out(c2018_PRChina, X), in(c2018_Japan, X), ix.
c(r8, A, 2) :- vr(X, A), out(c2018_PRChina, X), in(c2018_Japan, X), ix.

% c2018_PRChina ! c2018_AsiaOther
ir(X, r9) :- in(c2018_PRChina, X), in(c2018_AsiaOther, X).
:- #count {X : vrs(X), in(c2018_PRChina,X), out(c2018_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_PRChina,X), in(c2018_AsiaOther,X)} <= 0, pw.
pie(r9, A, 1) :- ir(X, A), in(c2018_PRChina, X), out(c2018_AsiaOther, X), ix.
c(r9, A, 1) :- vr(X, A), in(c2018_PRChina, X), out(c2018_AsiaOther, X), ix.
pie(r9, A, 2) :- ir(X, A), out(c2018_PRChina, X), in(c2018_AsiaOther, X), ix.
c(r9, A, 2) :- vr(X, A), out(c2018_PRChina, X), in(c2018_AsiaOther, X), ix.

% c2018_Japan ! c2018_AsiaOther
ir(X, r10) :- in(c2018_Japan, X), in(c2018_AsiaOther, X).
:- #count {X : vrs(X), in(c2018_Japan,X), out(c2018_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_Japan,X), in(c2018_AsiaOther,X)} <= 0, pw.
pie(r10, A, 1) :- ir(X, A), in(c2018_Japan, X), out(c2018_AsiaOther, X), ix.
c(r10, A, 1) :- vr(X, A), in(c2018_Japan, X), out(c2018_AsiaOther, X), ix.
pie(r10, A, 2) :- ir(X, A), out(c2018_Japan, X), in(c2018_AsiaOther, X), ix.
c(r10, A, 2) :- vr(X, A), out(c2018_Japan, X), in(c2018_AsiaOther, X), ix.

%% ISA
% c2018_Taiwan isa c2018_ROChina
ir(X, r11) :- in(c2018_Taiwan, X), out(c2018_ROChina, X), pw.
ir(X, prod(r11,R)) :- in(c2018_Taiwan,X), out3(c2018_ROChina, X, R), ix.
:- #count {X : vrs(X), in(c2018_Taiwan,X), in(c2018_ROChina,X)} <= 0, pw.
pie(r11, A, 1) :- ir(X, A), in(c2018_Taiwan, X), in(c2018_ROChina, X), ix.
c(r11, A, 1) :- vr(X, A), in(c2018_Taiwan, X), in(c2018_ROChina, X), ix.

% c2018_TaiwanOther isa c2018_ROChina
ir(X, r12) :- in(c2018_TaiwanOther, X), out(c2018_ROChina, X), pw.
ir(X, prod(r12,R)) :- in(c2018_TaiwanOther,X), out3(c2018_ROChina, X, R), ix.
:- #count {X : vrs(X), in(c2018_TaiwanOther,X), in(c2018_ROChina,X)} <= 0, pw.
pie(r12, A, 1) :- ir(X, A), in(c2018_TaiwanOther, X), in(c2018_ROChina, X), ix.
c(r12, A, 1) :- vr(X, A), in(c2018_TaiwanOther, X), in(c2018_ROChina, X), ix.

%% coverage
out3(c2018_ROChina, X, r13) :- out(c2018_Taiwan, X), out(c2018_TaiwanOther, X), ix.
out(c2018_ROChina, X) :- out(c2018_Taiwan, X), out(c2018_TaiwanOther, X), pw.
%% sibling disjointness
% c2018_Taiwan ! c2018_TaiwanOther
ir(X, r14) :- in(c2018_Taiwan, X), in(c2018_TaiwanOther, X).
:- #count {X : vrs(X), in(c2018_Taiwan,X), out(c2018_TaiwanOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_Taiwan,X), in(c2018_TaiwanOther,X)} <= 0, pw.
pie(r14, A, 1) :- ir(X, A), in(c2018_Taiwan, X), out(c2018_TaiwanOther, X), ix.
c(r14, A, 1) :- vr(X, A), in(c2018_Taiwan, X), out(c2018_TaiwanOther, X), ix.
pie(r14, A, 2) :- ir(X, A), out(c2018_Taiwan, X), in(c2018_TaiwanOther, X), ix.
c(r14, A, 2) :- vr(X, A), out(c2018_Taiwan, X), in(c2018_TaiwanOther, X), ix.

%% ISA
% c2018_MainlandChina isa c2018_PRChina
ir(X, r15) :- in(c2018_MainlandChina, X), out(c2018_PRChina, X), pw.
ir(X, prod(r15,R)) :- in(c2018_MainlandChina,X), out3(c2018_PRChina, X, R), ix.
:- #count {X : vrs(X), in(c2018_MainlandChina,X), in(c2018_PRChina,X)} <= 0, pw.
pie(r15, A, 1) :- ir(X, A), in(c2018_MainlandChina, X), in(c2018_PRChina, X), ix.
c(r15, A, 1) :- vr(X, A), in(c2018_MainlandChina, X), in(c2018_PRChina, X), ix.

% c2018_ChinaOther isa c2018_PRChina
ir(X, r16) :- in(c2018_ChinaOther, X), out(c2018_PRChina, X), pw.
ir(X, prod(r16,R)) :- in(c2018_ChinaOther,X), out3(c2018_PRChina, X, R), ix.
:- #count {X : vrs(X), in(c2018_ChinaOther,X), in(c2018_PRChina,X)} <= 0, pw.
pie(r16, A, 1) :- ir(X, A), in(c2018_ChinaOther, X), in(c2018_PRChina, X), ix.
c(r16, A, 1) :- vr(X, A), in(c2018_ChinaOther, X), in(c2018_PRChina, X), ix.

%% coverage
out3(c2018_PRChina, X, r17) :- out(c2018_MainlandChina, X), out(c2018_ChinaOther, X), ix.
out(c2018_PRChina, X) :- out(c2018_MainlandChina, X), out(c2018_ChinaOther, X), pw.
%% sibling disjointness
% c2018_MainlandChina ! c2018_ChinaOther
ir(X, r18) :- in(c2018_MainlandChina, X), in(c2018_ChinaOther, X).
:- #count {X : vrs(X), in(c2018_MainlandChina,X), out(c2018_ChinaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_MainlandChina,X), in(c2018_ChinaOther,X)} <= 0, pw.
pie(r18, A, 1) :- ir(X, A), in(c2018_MainlandChina, X), out(c2018_ChinaOther, X), ix.
c(r18, A, 1) :- vr(X, A), in(c2018_MainlandChina, X), out(c2018_ChinaOther, X), ix.
pie(r18, A, 2) :- ir(X, A), out(c2018_MainlandChina, X), in(c2018_ChinaOther, X), ix.
c(r18, A, 2) :- vr(X, A), out(c2018_MainlandChina, X), in(c2018_ChinaOther, X), ix.

%% ISA
% c2018_JapanIslands isa c2018_Japan
ir(X, r19) :- in(c2018_JapanIslands, X), out(c2018_Japan, X), pw.
ir(X, prod(r19,R)) :- in(c2018_JapanIslands,X), out3(c2018_Japan, X, R), ix.
:- #count {X : vrs(X), in(c2018_JapanIslands,X), in(c2018_Japan,X)} <= 0, pw.
pie(r19, A, 1) :- ir(X, A), in(c2018_JapanIslands, X), in(c2018_Japan, X), ix.
c(r19, A, 1) :- vr(X, A), in(c2018_JapanIslands, X), in(c2018_Japan, X), ix.

% c2018_JapanOther isa c2018_Japan
ir(X, r20) :- in(c2018_JapanOther, X), out(c2018_Japan, X), pw.
ir(X, prod(r20,R)) :- in(c2018_JapanOther,X), out3(c2018_Japan, X, R), ix.
:- #count {X : vrs(X), in(c2018_JapanOther,X), in(c2018_Japan,X)} <= 0, pw.
pie(r20, A, 1) :- ir(X, A), in(c2018_JapanOther, X), in(c2018_Japan, X), ix.
c(r20, A, 1) :- vr(X, A), in(c2018_JapanOther, X), in(c2018_Japan, X), ix.

%% coverage
out3(c2018_Japan, X, r21) :- out(c2018_JapanIslands, X), out(c2018_JapanOther, X), ix.
out(c2018_Japan, X) :- out(c2018_JapanIslands, X), out(c2018_JapanOther, X), pw.
%% sibling disjointness
% c2018_JapanIslands ! c2018_JapanOther
ir(X, r22) :- in(c2018_JapanIslands, X), in(c2018_JapanOther, X).
:- #count {X : vrs(X), in(c2018_JapanIslands,X), out(c2018_JapanOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c2018_JapanIslands,X), in(c2018_JapanOther,X)} <= 0, pw.
pie(r22, A, 1) :- ir(X, A), in(c2018_JapanIslands, X), out(c2018_JapanOther, X), ix.
c(r22, A, 1) :- vr(X, A), in(c2018_JapanIslands, X), out(c2018_JapanOther, X), ix.
pie(r22, A, 2) :- ir(X, A), out(c2018_JapanIslands, X), in(c2018_JapanOther, X), ix.
c(r22, A, 2) :- vr(X, A), out(c2018_JapanIslands, X), in(c2018_JapanOther, X), ix.

%% ISA
% c1660_KingdomOfTungning isa c1660_Asia
ir(X, r23) :- in(c1660_KingdomOfTungning, X), out(c1660_Asia, X), pw.
ir(X, prod(r23,R)) :- in(c1660_KingdomOfTungning,X), out3(c1660_Asia, X, R), ix.
:- #count {X : vrs(X), in(c1660_KingdomOfTungning,X), in(c1660_Asia,X)} <= 0, pw.
pie(r23, A, 1) :- ir(X, A), in(c1660_KingdomOfTungning, X), in(c1660_Asia, X), ix.
c(r23, A, 1) :- vr(X, A), in(c1660_KingdomOfTungning, X), in(c1660_Asia, X), ix.

% c1660_QingDynasty isa c1660_Asia
ir(X, r24) :- in(c1660_QingDynasty, X), out(c1660_Asia, X), pw.
ir(X, prod(r24,R)) :- in(c1660_QingDynasty,X), out3(c1660_Asia, X, R), ix.
:- #count {X : vrs(X), in(c1660_QingDynasty,X), in(c1660_Asia,X)} <= 0, pw.
pie(r24, A, 1) :- ir(X, A), in(c1660_QingDynasty, X), in(c1660_Asia, X), ix.
c(r24, A, 1) :- vr(X, A), in(c1660_QingDynasty, X), in(c1660_Asia, X), ix.

% c1660_EdoPeriod isa c1660_Asia
ir(X, r25) :- in(c1660_EdoPeriod, X), out(c1660_Asia, X), pw.
ir(X, prod(r25,R)) :- in(c1660_EdoPeriod,X), out3(c1660_Asia, X, R), ix.
:- #count {X : vrs(X), in(c1660_EdoPeriod,X), in(c1660_Asia,X)} <= 0, pw.
pie(r25, A, 1) :- ir(X, A), in(c1660_EdoPeriod, X), in(c1660_Asia, X), ix.
c(r25, A, 1) :- vr(X, A), in(c1660_EdoPeriod, X), in(c1660_Asia, X), ix.

% c1660_AsiaOther isa c1660_Asia
ir(X, r26) :- in(c1660_AsiaOther, X), out(c1660_Asia, X), pw.
ir(X, prod(r26,R)) :- in(c1660_AsiaOther,X), out3(c1660_Asia, X, R), ix.
:- #count {X : vrs(X), in(c1660_AsiaOther,X), in(c1660_Asia,X)} <= 0, pw.
pie(r26, A, 1) :- ir(X, A), in(c1660_AsiaOther, X), in(c1660_Asia, X), ix.
c(r26, A, 1) :- vr(X, A), in(c1660_AsiaOther, X), in(c1660_Asia, X), ix.

%% coverage
out3(c1660_Asia, X, r27) :- out(c1660_KingdomOfTungning, X), out(c1660_QingDynasty, X), out(c1660_EdoPeriod, X), out(c1660_AsiaOther, X), ix.
out(c1660_Asia, X) :- out(c1660_KingdomOfTungning, X), out(c1660_QingDynasty, X), out(c1660_EdoPeriod, X), out(c1660_AsiaOther, X), pw.
%% sibling disjointness
% c1660_KingdomOfTungning ! c1660_QingDynasty
ir(X, r28) :- in(c1660_KingdomOfTungning, X), in(c1660_QingDynasty, X).
:- #count {X : vrs(X), in(c1660_KingdomOfTungning,X), out(c1660_QingDynasty,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_KingdomOfTungning,X), in(c1660_QingDynasty,X)} <= 0, pw.
pie(r28, A, 1) :- ir(X, A), in(c1660_KingdomOfTungning, X), out(c1660_QingDynasty, X), ix.
c(r28, A, 1) :- vr(X, A), in(c1660_KingdomOfTungning, X), out(c1660_QingDynasty, X), ix.
pie(r28, A, 2) :- ir(X, A), out(c1660_KingdomOfTungning, X), in(c1660_QingDynasty, X), ix.
c(r28, A, 2) :- vr(X, A), out(c1660_KingdomOfTungning, X), in(c1660_QingDynasty, X), ix.

% c1660_KingdomOfTungning ! c1660_EdoPeriod
ir(X, r29) :- in(c1660_KingdomOfTungning, X), in(c1660_EdoPeriod, X).
:- #count {X : vrs(X), in(c1660_KingdomOfTungning,X), out(c1660_EdoPeriod,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_KingdomOfTungning,X), in(c1660_EdoPeriod,X)} <= 0, pw.
pie(r29, A, 1) :- ir(X, A), in(c1660_KingdomOfTungning, X), out(c1660_EdoPeriod, X), ix.
c(r29, A, 1) :- vr(X, A), in(c1660_KingdomOfTungning, X), out(c1660_EdoPeriod, X), ix.
pie(r29, A, 2) :- ir(X, A), out(c1660_KingdomOfTungning, X), in(c1660_EdoPeriod, X), ix.
c(r29, A, 2) :- vr(X, A), out(c1660_KingdomOfTungning, X), in(c1660_EdoPeriod, X), ix.

% c1660_KingdomOfTungning ! c1660_AsiaOther
ir(X, r30) :- in(c1660_KingdomOfTungning, X), in(c1660_AsiaOther, X).
:- #count {X : vrs(X), in(c1660_KingdomOfTungning,X), out(c1660_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_KingdomOfTungning,X), in(c1660_AsiaOther,X)} <= 0, pw.
pie(r30, A, 1) :- ir(X, A), in(c1660_KingdomOfTungning, X), out(c1660_AsiaOther, X), ix.
c(r30, A, 1) :- vr(X, A), in(c1660_KingdomOfTungning, X), out(c1660_AsiaOther, X), ix.
pie(r30, A, 2) :- ir(X, A), out(c1660_KingdomOfTungning, X), in(c1660_AsiaOther, X), ix.
c(r30, A, 2) :- vr(X, A), out(c1660_KingdomOfTungning, X), in(c1660_AsiaOther, X), ix.

% c1660_QingDynasty ! c1660_EdoPeriod
ir(X, r31) :- in(c1660_QingDynasty, X), in(c1660_EdoPeriod, X).
:- #count {X : vrs(X), in(c1660_QingDynasty,X), out(c1660_EdoPeriod,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_QingDynasty,X), in(c1660_EdoPeriod,X)} <= 0, pw.
pie(r31, A, 1) :- ir(X, A), in(c1660_QingDynasty, X), out(c1660_EdoPeriod, X), ix.
c(r31, A, 1) :- vr(X, A), in(c1660_QingDynasty, X), out(c1660_EdoPeriod, X), ix.
pie(r31, A, 2) :- ir(X, A), out(c1660_QingDynasty, X), in(c1660_EdoPeriod, X), ix.
c(r31, A, 2) :- vr(X, A), out(c1660_QingDynasty, X), in(c1660_EdoPeriod, X), ix.

% c1660_QingDynasty ! c1660_AsiaOther
ir(X, r32) :- in(c1660_QingDynasty, X), in(c1660_AsiaOther, X).
:- #count {X : vrs(X), in(c1660_QingDynasty,X), out(c1660_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_QingDynasty,X), in(c1660_AsiaOther,X)} <= 0, pw.
pie(r32, A, 1) :- ir(X, A), in(c1660_QingDynasty, X), out(c1660_AsiaOther, X), ix.
c(r32, A, 1) :- vr(X, A), in(c1660_QingDynasty, X), out(c1660_AsiaOther, X), ix.
pie(r32, A, 2) :- ir(X, A), out(c1660_QingDynasty, X), in(c1660_AsiaOther, X), ix.
c(r32, A, 2) :- vr(X, A), out(c1660_QingDynasty, X), in(c1660_AsiaOther, X), ix.

% c1660_EdoPeriod ! c1660_AsiaOther
ir(X, r33) :- in(c1660_EdoPeriod, X), in(c1660_AsiaOther, X).
:- #count {X : vrs(X), in(c1660_EdoPeriod,X), out(c1660_AsiaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_EdoPeriod,X), in(c1660_AsiaOther,X)} <= 0, pw.
pie(r33, A, 1) :- ir(X, A), in(c1660_EdoPeriod, X), out(c1660_AsiaOther, X), ix.
c(r33, A, 1) :- vr(X, A), in(c1660_EdoPeriod, X), out(c1660_AsiaOther, X), ix.
pie(r33, A, 2) :- ir(X, A), out(c1660_EdoPeriod, X), in(c1660_AsiaOther, X), ix.
c(r33, A, 2) :- vr(X, A), out(c1660_EdoPeriod, X), in(c1660_AsiaOther, X), ix.

%% ISA
% c1660_Formosa isa c1660_KingdomOfTungning
ir(X, r34) :- in(c1660_Formosa, X), out(c1660_KingdomOfTungning, X), pw.
ir(X, prod(r34,R)) :- in(c1660_Formosa,X), out3(c1660_KingdomOfTungning, X, R), ix.
:- #count {X : vrs(X), in(c1660_Formosa,X), in(c1660_KingdomOfTungning,X)} <= 0, pw.
pie(r34, A, 1) :- ir(X, A), in(c1660_Formosa, X), in(c1660_KingdomOfTungning, X), ix.
c(r34, A, 1) :- vr(X, A), in(c1660_Formosa, X), in(c1660_KingdomOfTungning, X), ix.

% c1660_TaiwanOther isa c1660_KingdomOfTungning
ir(X, r35) :- in(c1660_TaiwanOther, X), out(c1660_KingdomOfTungning, X), pw.
ir(X, prod(r35,R)) :- in(c1660_TaiwanOther,X), out3(c1660_KingdomOfTungning, X, R), ix.
:- #count {X : vrs(X), in(c1660_TaiwanOther,X), in(c1660_KingdomOfTungning,X)} <= 0, pw.
pie(r35, A, 1) :- ir(X, A), in(c1660_TaiwanOther, X), in(c1660_KingdomOfTungning, X), ix.
c(r35, A, 1) :- vr(X, A), in(c1660_TaiwanOther, X), in(c1660_KingdomOfTungning, X), ix.

%% coverage
out3(c1660_KingdomOfTungning, X, r36) :- out(c1660_Formosa, X), out(c1660_TaiwanOther, X), ix.
out(c1660_KingdomOfTungning, X) :- out(c1660_Formosa, X), out(c1660_TaiwanOther, X), pw.
%% sibling disjointness
% c1660_Formosa ! c1660_TaiwanOther
ir(X, r37) :- in(c1660_Formosa, X), in(c1660_TaiwanOther, X).
:- #count {X : vrs(X), in(c1660_Formosa,X), out(c1660_TaiwanOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_Formosa,X), in(c1660_TaiwanOther,X)} <= 0, pw.
pie(r37, A, 1) :- ir(X, A), in(c1660_Formosa, X), out(c1660_TaiwanOther, X), ix.
c(r37, A, 1) :- vr(X, A), in(c1660_Formosa, X), out(c1660_TaiwanOther, X), ix.
pie(r37, A, 2) :- ir(X, A), out(c1660_Formosa, X), in(c1660_TaiwanOther, X), ix.
c(r37, A, 2) :- vr(X, A), out(c1660_Formosa, X), in(c1660_TaiwanOther, X), ix.

%% ISA
% c1660_MainlandChina isa c1660_QingDynasty
ir(X, r38) :- in(c1660_MainlandChina, X), out(c1660_QingDynasty, X), pw.
ir(X, prod(r38,R)) :- in(c1660_MainlandChina,X), out3(c1660_QingDynasty, X, R), ix.
:- #count {X : vrs(X), in(c1660_MainlandChina,X), in(c1660_QingDynasty,X)} <= 0, pw.
pie(r38, A, 1) :- ir(X, A), in(c1660_MainlandChina, X), in(c1660_QingDynasty, X), ix.
c(r38, A, 1) :- vr(X, A), in(c1660_MainlandChina, X), in(c1660_QingDynasty, X), ix.

% c1660_ChinaOther isa c1660_QingDynasty
ir(X, r39) :- in(c1660_ChinaOther, X), out(c1660_QingDynasty, X), pw.
ir(X, prod(r39,R)) :- in(c1660_ChinaOther,X), out3(c1660_QingDynasty, X, R), ix.
:- #count {X : vrs(X), in(c1660_ChinaOther,X), in(c1660_QingDynasty,X)} <= 0, pw.
pie(r39, A, 1) :- ir(X, A), in(c1660_ChinaOther, X), in(c1660_QingDynasty, X), ix.
c(r39, A, 1) :- vr(X, A), in(c1660_ChinaOther, X), in(c1660_QingDynasty, X), ix.

%% coverage
out3(c1660_QingDynasty, X, r40) :- out(c1660_MainlandChina, X), out(c1660_ChinaOther, X), ix.
out(c1660_QingDynasty, X) :- out(c1660_MainlandChina, X), out(c1660_ChinaOther, X), pw.
%% sibling disjointness
% c1660_MainlandChina ! c1660_ChinaOther
ir(X, r41) :- in(c1660_MainlandChina, X), in(c1660_ChinaOther, X).
:- #count {X : vrs(X), in(c1660_MainlandChina,X), out(c1660_ChinaOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_MainlandChina,X), in(c1660_ChinaOther,X)} <= 0, pw.
pie(r41, A, 1) :- ir(X, A), in(c1660_MainlandChina, X), out(c1660_ChinaOther, X), ix.
c(r41, A, 1) :- vr(X, A), in(c1660_MainlandChina, X), out(c1660_ChinaOther, X), ix.
pie(r41, A, 2) :- ir(X, A), out(c1660_MainlandChina, X), in(c1660_ChinaOther, X), ix.
c(r41, A, 2) :- vr(X, A), out(c1660_MainlandChina, X), in(c1660_ChinaOther, X), ix.

%% ISA
% c1660_JapanIslands isa c1660_EdoPeriod
ir(X, r42) :- in(c1660_JapanIslands, X), out(c1660_EdoPeriod, X), pw.
ir(X, prod(r42,R)) :- in(c1660_JapanIslands,X), out3(c1660_EdoPeriod, X, R), ix.
:- #count {X : vrs(X), in(c1660_JapanIslands,X), in(c1660_EdoPeriod,X)} <= 0, pw.
pie(r42, A, 1) :- ir(X, A), in(c1660_JapanIslands, X), in(c1660_EdoPeriod, X), ix.
c(r42, A, 1) :- vr(X, A), in(c1660_JapanIslands, X), in(c1660_EdoPeriod, X), ix.

% c1660_JapanOther isa c1660_EdoPeriod
ir(X, r43) :- in(c1660_JapanOther, X), out(c1660_EdoPeriod, X), pw.
ir(X, prod(r43,R)) :- in(c1660_JapanOther,X), out3(c1660_EdoPeriod, X, R), ix.
:- #count {X : vrs(X), in(c1660_JapanOther,X), in(c1660_EdoPeriod,X)} <= 0, pw.
pie(r43, A, 1) :- ir(X, A), in(c1660_JapanOther, X), in(c1660_EdoPeriod, X), ix.
c(r43, A, 1) :- vr(X, A), in(c1660_JapanOther, X), in(c1660_EdoPeriod, X), ix.

%% coverage
out3(c1660_EdoPeriod, X, r44) :- out(c1660_JapanIslands, X), out(c1660_JapanOther, X), ix.
out(c1660_EdoPeriod, X) :- out(c1660_JapanIslands, X), out(c1660_JapanOther, X), pw.
%% sibling disjointness
% c1660_JapanIslands ! c1660_JapanOther
ir(X, r45) :- in(c1660_JapanIslands, X), in(c1660_JapanOther, X).
:- #count {X : vrs(X), in(c1660_JapanIslands,X), out(c1660_JapanOther,X)} <= 0, pw.
:- #count {X : vrs(X), out(c1660_JapanIslands,X), in(c1660_JapanOther,X)} <= 0, pw.
pie(r45, A, 1) :- ir(X, A), in(c1660_JapanIslands, X), out(c1660_JapanOther, X), ix.
c(r45, A, 1) :- vr(X, A), in(c1660_JapanIslands, X), out(c1660_JapanOther, X), ix.
pie(r45, A, 2) :- ir(X, A), out(c1660_JapanIslands, X), in(c1660_JapanOther, X), ix.
c(r45, A, 2) :- vr(X, A), out(c1660_JapanIslands, X), in(c1660_JapanOther, X), ix.


%%% Articulations
% 2018.AsiaOther equals 1660.AsiaOther
ir(X, r46) :- out(c2018_AsiaOther,X), in(c1660_AsiaOther,X).
ir(X, r46) :- in(c2018_AsiaOther,X), out(c1660_AsiaOther,X).
ir(X, prod(r46,R)) :- out3(c2018_AsiaOther, X, R), in(c1660_AsiaOther,X), ix.
ir(X, prod(r46,R)) :- in(c2018_AsiaOther,X), out3(c1660_AsiaOther, X, R), ix.
:- #count {X : vrs(X), in(c2018_AsiaOther,X), in(c1660_AsiaOther,X)} <= 0, pw.
pie(r46, A, 1) :- ir(X, A), in(c2018_AsiaOther, X), in(c1660_AsiaOther, X), ix.
c(r46, A, 1) :- vr(X, A), in(c2018_AsiaOther, X), in(c1660_AsiaOther, X), ix.


% 2018.Taiwan equals 1660.Formosa
ir(X, r47) :- out(c2018_Taiwan,X), in(c1660_Formosa,X).
ir(X, r47) :- in(c2018_Taiwan,X), out(c1660_Formosa,X).
ir(X, prod(r47,R)) :- out3(c2018_Taiwan, X, R), in(c1660_Formosa,X), ix.
ir(X, prod(r47,R)) :- in(c2018_Taiwan,X), out3(c1660_Formosa, X, R), ix.
:- #count {X : vrs(X), in(c2018_Taiwan,X), in(c1660_Formosa,X)} <= 0, pw.
pie(r47, A, 1) :- ir(X, A), in(c2018_Taiwan, X), in(c1660_Formosa, X), ix.
c(r47, A, 1) :- vr(X, A), in(c2018_Taiwan, X), in(c1660_Formosa, X), ix.


% 2018.MainlandChina equals 1660.MainlandChina
ir(X, r48) :- out(c2018_MainlandChina,X), in(c1660_MainlandChina,X).
ir(X, r48) :- in(c2018_MainlandChina,X), out(c1660_MainlandChina,X).
ir(X, prod(r48,R)) :- out3(c2018_MainlandChina, X, R), in(c1660_MainlandChina,X), ix.
ir(X, prod(r48,R)) :- in(c2018_MainlandChina,X), out3(c1660_MainlandChina, X, R), ix.
:- #count {X : vrs(X), in(c2018_MainlandChina,X), in(c1660_MainlandChina,X)} <= 0, pw.
pie(r48, A, 1) :- ir(X, A), in(c2018_MainlandChina, X), in(c1660_MainlandChina, X), ix.
c(r48, A, 1) :- vr(X, A), in(c2018_MainlandChina, X), in(c1660_MainlandChina, X), ix.


% 2018.JapanIslands equals 1660.JapanIslands
ir(X, r49) :- out(c2018_JapanIslands,X), in(c1660_JapanIslands,X).
ir(X, r49) :- in(c2018_JapanIslands,X), out(c1660_JapanIslands,X).
ir(X, prod(r49,R)) :- out3(c2018_JapanIslands, X, R), in(c1660_JapanIslands,X), ix.
ir(X, prod(r49,R)) :- in(c2018_JapanIslands,X), out3(c1660_JapanIslands, X, R), ix.
:- #count {X : vrs(X), in(c2018_JapanIslands,X), in(c1660_JapanIslands,X)} <= 0, pw.
pie(r49, A, 1) :- ir(X, A), in(c2018_JapanIslands, X), in(c1660_JapanIslands, X), ix.
c(r49, A, 1) :- vr(X, A), in(c2018_JapanIslands, X), in(c1660_JapanIslands, X), ix.


% 2018.TaiwanOther equals 1660.TaiwanOther
ir(X, r50) :- out(c2018_TaiwanOther,X), in(c1660_TaiwanOther,X).
ir(X, r50) :- in(c2018_TaiwanOther,X), out(c1660_TaiwanOther,X).
ir(X, prod(r50,R)) :- out3(c2018_TaiwanOther, X, R), in(c1660_TaiwanOther,X), ix.
ir(X, prod(r50,R)) :- in(c2018_TaiwanOther,X), out3(c1660_TaiwanOther, X, R), ix.
:- #count {X : vrs(X), in(c2018_TaiwanOther,X), in(c1660_TaiwanOther,X)} <= 0, pw.
pie(r50, A, 1) :- ir(X, A), in(c2018_TaiwanOther, X), in(c1660_TaiwanOther, X), ix.
c(r50, A, 1) :- vr(X, A), in(c2018_TaiwanOther, X), in(c1660_TaiwanOther, X), ix.


% 2018.ChinaOther equals 1660.ChinaOther
ir(X, r51) :- out(c2018_ChinaOther,X), in(c1660_ChinaOther,X).
ir(X, r51) :- in(c2018_ChinaOther,X), out(c1660_ChinaOther,X).
ir(X, prod(r51,R)) :- out3(c2018_ChinaOther, X, R), in(c1660_ChinaOther,X), ix.
ir(X, prod(r51,R)) :- in(c2018_ChinaOther,X), out3(c1660_ChinaOther, X, R), ix.
:- #count {X : vrs(X), in(c2018_ChinaOther,X), in(c1660_ChinaOther,X)} <= 0, pw.
pie(r51, A, 1) :- ir(X, A), in(c2018_ChinaOther, X), in(c1660_ChinaOther, X), ix.
c(r51, A, 1) :- vr(X, A), in(c2018_ChinaOther, X), in(c1660_ChinaOther, X), ix.


% 2018.JapanOther equals 1660.JapanOther
ir(X, r52) :- out(c2018_JapanOther,X), in(c1660_JapanOther,X).
ir(X, r52) :- in(c2018_JapanOther,X), out(c1660_JapanOther,X).
ir(X, prod(r52,R)) :- out3(c2018_JapanOther, X, R), in(c1660_JapanOther,X), ix.
ir(X, prod(r52,R)) :- in(c2018_JapanOther,X), out3(c1660_JapanOther, X, R), ix.
:- #count {X : vrs(X), in(c2018_JapanOther,X), in(c1660_JapanOther,X)} <= 0, pw.
pie(r52, A, 1) :- ir(X, A), in(c2018_JapanOther, X), in(c1660_JapanOther, X), ix.
c(r52, A, 1) :- vr(X, A), in(c2018_JapanOther, X), in(c1660_JapanOther, X), ix.


%%% Decoding now
:- rel(X, Y, "="), rel(X, Y, "<"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "><"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- not rel(X, Y, "="), not rel(X, Y, "<"), not rel(X, Y, ">"), not rel(X, Y, "><"), not rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), N1 < N2, not ncf(X), not ncf(Y), pw.

rel(X, Y, "=") :- not hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "<") :- not hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, ">") :- hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "><") :- hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, "!") :- hint(X, Y, 0), not hint(X, Y, 1), hint(X, Y, 2), pw.


hint(X, Y, 0) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), out(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 1) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 2) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), out(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.

%%% Combined concept decoding
combined(X,1,0) :- rel(X,Y,">").
combined(X,1,0) :- rel(X,Y,"<").
combined(X,1,0) :- rel(X,Y,"=").
combined(X,1,0) :- rel(X,Y,"!").
combined(Y,1,1) :- rel(X,Y,">").
combined(Y,1,1) :- rel(X,Y,"<").
combined(Y,1,1) :- rel(X,Y,"=").
combined(Y,1,1) :- rel(X,Y,"!").
combined(Z,1,2) :- rel(X,Y,"><"), newcon(Z, X, Y, _).
%%% unhide the overlap concepts
combined(X,1,0) :- rel(X,Y,"><").
combined(X,0,0) :- rel(X,Y,"><"), hide.
%%% unhide the overlap concepts
combined(Y,1,1) :- rel(X,Y,"><").
combined(Y,0,1) :- rel(X,Y,"><"), hide.
combined2(X,Y) :- combined(X,Y,Z).
combined2(X,1) :- not combined2(X,0), con(X).
combined2(X,2) :- combined2(X,1), not combined2(X,0), con(X).
combined2(X,1) :- relcc(X,Y,"<").
combined2(X,1) :- relcc(X,Y,">").
combined2(X,1) :- relcc(X,Y,"=").
combined2(X,1) :- relcc(X,Y,"!").
combined2(Y,1) :- relcc(X,Y,"<").
combined2(Y,1) :- relcc(X,Y,">").
combined2(Y,1) :- relcc(X,Y,"="),con(Y).
combined2(Y,1) :- relcc(X,Y,"!").
hant(X, X, 3) :- combined2(X,1).
hant(X, Y, 0) :- combined2(X,1), combined2(Y,1), not hant(X, Y, 3), vrs(R), in(X, R), out(Y, R).
hant(X, Y, 1) :- combined2(X,1), combined2(Y,1), not hant(X, Y, 3), vrs(R), in(X, R),  in(Y, R).
hant(X, Y, 2) :- combined2(X,1), combined2(Y,1), not hant(X, Y, 3), vrs(R), out(X, R), in(Y, R).
relcc(X, Y, "=") :- X<Y, not hant(X, Y, 0), hant(X, Y, 1), not hant(X, Y, 2), pw.
relcc(X, Y, "<") :- X<Y, not hant(X, Y, 0), hant(X, Y, 1), hant(X, Y, 2), pw.
relcc(X, Y, ">") :- X<Y, hant(X, Y, 0), hant(X, Y, 1), not hant(X, Y, 2), pw.
relcc(X, Y, "><") :- X<Y, hant(X, Y, 0), hant(X, Y, 1), hant(X, Y, 2), pw.
relcc(X, Y, "!") :- X<Y, hant(X, Y, 0), not hant(X, Y, 1), hant(X, Y, 2), pw.
%combined2(Z,1) :- relcc(X,Y,"><"), and(X, Y, Z).
%%%% unhide the overlap concepts
%combined2(X,1) :- relcc(X,Y,"><"), and(X, Y, Z).
%combined2(X,0) :- relcc(X,Y,"><"), and(X, Y, Z), hide.
%%%% unhide the overlap concepts
%combined2(Y,1) :- relcc(X,Y,"><"), and(X, Y, Z).
%combined2(Y,0) :- relcc(X,Y,"><"), and(X, Y, Z), hide.
%combined2(Z,1) :- relcc(X,Y,"><"), minus(X, Y, Z).
%%%% unhide the overlap concepts
%combined2(X,1) :- relcc(X,Y,"><"), minus(X, Y, Z).
%combined2(X,0) :- relcc(X,Y,"><"), minus(X, Y, Z), hide.
%%%% unhide the overlap concepts
%combined2(Y,1) :- relcc(X,Y,"><"), minus(X, Y, Z).
%combined2(Y,0) :- relcc(X,Y,"><"), minus(X, Y, Z), hide.
%combined2(Z,1) :- relcc(X,Y,"><"), minus(Y, X, Z).
%%%% unhide the overlap concepts
%combined2(X,1) :- relcc(X,Y,"><"), minus(Y, X, Z).
%combined2(X,0) :- relcc(X,Y,"><"), minus(Y, X, Z), hide.
%%%% unhide the overlap concepts
%combined2(Y,1) :- relcc(X,Y,"><"), minus(Y, X, Z).
%combined2(Y,0) :- relcc(X,Y,"><"), minus(Y, X, Z), hide.
relout(X, Y, Z) :- relcc(X, Y, Z), combined2(X, 2), combined2(Y, 2).

%%% combined concept
cb(X) :- newcon(X, _, _, _).
cp(X) :- concept2(X, _).
con(X) :- cb(X).
con(X) :- cp(X).
combined2(C, 0) :- newcon(C, A, B, _), not rel(A, B, "><"), not rel(B, A, "><").
in(X, M) :- newcon(X, Y, Z, 0), in(Y, M), out(Z, M).
out(X, M) :- newcon(X, Y, Z, 0), out(Y, M).
out(X, M) :- newcon(X, Y, Z, 0), in(Z, M).
%irs(M) :- newcon(X, Y, Z, 0), out(X, M), in(Y, M), out(Z, M).
%irs(M) :- newcon(X, Y, Z, 0), in(X, M), out(Y, M).
%irs(M) :- newcon(X, Y, Z, 0), in(X, M), in(Z, M).
in(X, M) :- newcon(X, Y, Z, 1), in(Y, M), in(Z, M).
out(X, M) :- newcon(X, Y, Z, 1), out(Y, M).
out(X, M) :- newcon(X, Y, Z, 1), out(Z, M).
%irs(M) :- newcon(X, Y, Z, 1), out(X, M), in(Y, M), in(Z, M).
%irs(M) :- newcon(X, Y, Z, 1), in(X, M), out(Y, M).
%irs(M) :- newcon(X, Y, Z, 1), in(X, M), out(Z, M).
in(X, M) :- newcon(X, Y, Z, 2), out(Y, M), in(Z, M).
out(X, M) :- newcon(X, Y, Z, 2), in(Y, M).
out(X, M) :- newcon(X, Y, Z, 2), out(Z, M).
%irs(M) :- newcon(X, Y, Z, 2), out(X, M), out(Y, M), in(Z, M).
%irs(M) :- newcon(X, Y, Z, 2), in(X, M), in(Y, M).
%irs(M) :- newcon(X, Y, Z, 2), in(X, M), out(Z, M).
%%%% concept to combined concept
%cnotcc(C,CC, T) :- concept2(C, T), cb(CC), in(C, M), out(CC, M), vrs(M).
%cnotcc(C,CC, T) :- concept2(C, T), cb(CC), out(C, M), in(CC, M), vrs(M).
%cnotcc(C,CC, T) :- concept2(C, T), cb(CC), in(CC, M), irs(M).
%ctocc(C, CC, T) :- concept2(C, T), cb(CC), not cnotcc(C, CC, T).
%ctocc(C, CC, 2) :- newcon(C, X, Y, 0), ctocc(X, XC, _), ctocc(Y, YC, _), minus(XC, YC, CC).
%ctocc(C, CC, 2) :- newcon(C, X, Y, 1), ctocc(X, XC, _), ctocc(Y, YC, _), and(XC, YC, CC).
%ctocc(C, CC, 2) :- newcon(C, X, Y, 2), ctocc(X, XC, _), ctocc(Y, YC, _), minus(YC, XC, CC).
%
%%% and op
%nand(X, Y, Z) :- con(X), con(Y), con(Z), r(M), out(X, M), in(Z, M).
%nand(X, Y, Z) :- con(X), con(Y), con(Z), r(M), out(Y, M), in(Z, M).
%nand(X, Y, Z) :- con(X), con(Y), con(Z), r(M), in(X, M), in(Y, M), out(Z, M).
%and(X, Y, Z) :- con(X), con(Y), con(Z), not nand(X, Y, Z).
%
%%% minus op
%nminus(X, Y, Z) :- con(X), con(Y), con(Z), r(M), out(X, M), in(Z, M).
%nminus(X, Y, Z) :- con(X), con(Y), con(Z), r(M), in(X, M), out(Y, M), out(Z, M).
%nminus(X, Y, Z) :- con(X), con(Y), con(Z), r(M), in(X, M), in(Y, M), in(Z, M).
%minus(X, Y, Z) :- con(X), con(Y), con(Z), not nminus(X, Y, Z).
